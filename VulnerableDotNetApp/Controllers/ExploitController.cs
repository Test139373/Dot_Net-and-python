using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Data.SqlClient;
using System.IdentityModel.Tokens.Jwt;
using log4net;

namespace VulnerableDotNetApp.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class ExploitController : ControllerBase
    {
        private static readonly ILog _log = LogManager.GetLogger(typeof(ExploitController));

        // VULNERABLE: CVE-2021-24112 - Newtonsoft.Json Deserialization RCE
        [HttpPost("deserialize")]
        public IActionResult Deserialize([FromBody] string json)
        {
            var obj = JsonConvert.DeserializeObject<dynamic>(json, new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.All // Dangerous setting
            });
            return Ok(obj);
        }

        // VULNERABLE: CVE-2018-1285 - log4net Unsafe Logging
        [HttpGet("log")]
        public IActionResult Log([FromQuery] string input)
        {
            _log.Info(input); // Logs user input unsafely
            return Ok("Logged: " + input);
        }

        // VULNERABLE: CVE-2022-29117 - JWT Validation Bypass
        [HttpGet("validateToken")]
        public IActionResult ValidateToken([FromQuery] string token)
        {
            var handler = new JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token); // No validation!
            return Ok(jwt.Payload);
        }

        // VULNERABLE: SQL Injection (Dapper misuse)
        [HttpGet("search")]
        public IActionResult Search([FromQuery] string name)
        {
            using var conn = new SqlConnection("Server=.;Database=test;Trusted_Connection=True;");
            var query = $"SELECT * FROM Users WHERE Name = '{name}'"; // UNSAFE
            var results = conn.Query(query); // Dapper executes raw SQL
            return Ok(results);
        }

        // VULNERABLE: CVE-2019-0982 - MVC XSS
        [HttpGet("xss")]
        public IActionResult Xss([FromQuery] string payload)
        {
            return Content(payload, "text/html"); // No output encoding
        }
    }
}